name: Terraform + Ansible Deploy PostgreSQL GCP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, prod)"
        required: true
        default: dev

permissions:
  contents: read
  id-token: write

jobs:
  security:
    name: Security SSH Key Generation
    runs-on: ubuntu-latest
    steps:
      - name: Generar clave SSH temporal
        id: generate_ssh_key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N "" -C "gha@runner"
          echo "SSH_PUBLIC_KEY<<EOF" >> $GITHUB_ENV
          cat ~/.ssh/id_rsa.pub >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Verificar variable ssh_public_key
        run: echo "${{ env.SSH_PUBLIC_KEY }}"

  terraform:
    name: Terraform Apply Postgresql
    runs-on: ubuntu-latest
    needs: security
    environment:
      name: Development

    defaults:
      run:
        working-directory: terraform/envs/${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Verify GCP secret is available
        run: |
          if [ -z "${{ secrets.GCP_CREDENTIALS }}" ]; then
            echo "Secret missing!"
            exit 1
          else
            echo "Secret available"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          export_environment_variables: true

      - name: Crear terraform.tfvars
        run: |
          cat <<EOF > terraform.tfvars
          project        = "${{ vars.GCP_PROJECT }}"
          region         = "${{ vars.GCP_REGION }}"
          zone           = "${{ vars.GCP_ZONE }}"
          ssh_public_key = "${{ env.SSH_PUBLIC_KEY }}"
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -recursive
        env:
          TF_LOG: DEBUG

      - name: Terraform Plan
        run: terraform plan
        env:
          TF_LOG: DEBUG

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        env:
          TF_LOG: DEBUG

      - name: Obtener IP pública
        id: get_ip
        run: |
          IP=$(terraform output -raw postgresql_public_ip 2>/dev/null || true)
          if [ -z "$IP" ]; then
            echo "::error::No se encontró output 'postgresql_public_ip'. Asegúrate de que el módulo PostgreSQL se ejecutó correctamente."
            exit 1
          fi
          echo "POSTGRESQL_IP=$IP" >> $GITHUB_ENV

  ansible:
    name: Ansible Deploy PostgreSQL
    runs-on: ubuntu-latest
    needs: terraform
    environment:
      name: Development

    defaults:
      run:
        working-directory: ansible

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Agregar clave SSH privada
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Generar inventory.ini
        run: |
          echo "[postgresql]" > inventory.ini
          echo "vm-postgresql ansible_host=${POSTGRESQL_IP} ansible_user=debian ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

      - name: Mostrar contenido de inventory.ini
        run: cat inventory.ini
        working-directory: ansible

      - name: Instalar Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Ejecutar playbook Ansible
        run: ansible-playbook -i inventory.ini playbook.yml
